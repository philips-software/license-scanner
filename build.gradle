buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.17.2"
  }
}

plugins {
    id 'application'
    id 'com.adarshr.test-logger' version '2.1.1'
}

apply from: "${rootDir}/ci/forest/java/gradle/publish.gradle"

repositories {
    mavenLocal()
    maven { url 'https://plugins.gradle.org/m2/' }
    jcenter()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web:2.3.1.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-actuator:2.3.1.RELEASE'
    implementation 'org.springframework.boot:spring-boot-configuration-processor:2.3.1.RELEASE'
    implementation 'org.hibernate:hibernate-validator:6.0.16.Final'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE'
    implementation 'com.h2database:h2:1.4.200'
    implementation 'org.flywaydb:flyway-core:6.4.4'
//    runtimeOnly 'org.springframework.boot:spring-boot-devtools:2.3.1.RELEASE'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.3.1.RELEASE'
    testImplementation 'org.assertj:assertj-core:3.16.1'
    testImplementation 'org.mockito:mockito-core:3.3.3'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.1.9'
    compileOnly 'pl.tlinkowski.annotation:pl.tlinkowski.annotation.basic:0.2.0'
}

testlogger {
    theme 'mocha'
}

test {
    useJUnitPlatform()
}

application {
    mainClass = 'com.philips.research.licensescanner.LicenseScannerService'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.philips.research.licensescanner.LicenseScannerService'
        )
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}
